# -*- coding: utf-8 -*-
"""BST_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WxsU10GeCpiotTUtIGABdGsGfzTZJEbl
"""

# reference: from above lecture colab file, course SI507.

import json


class TreeNode:
    def __init__(self, key, val, left=None, right=None, parent=None):
        self.key = key
        self.payload = val  # input the value, use the payload to compare
        self.leftChild = left
        self.rightChild = right
        self.parent = parent  # the upper level connected with it

    def hasLeftChild(self):
        return self.leftChild

    def hasRightChild(self):
        return self.rightChild

    def isLeftChild(self):
        return self.parent and self.parent.leftChild == self

    def isRightChild(self):
        return self.parent and self.parent.rightChild == self

    def isRoot(self):
        return not self.parent

    def isLeaf(self):
        return not (self.rightChild or self.leftChild)

    def hasBothChildren(self):
        return self.rightChild and self.leftChild


class BinarySearchTree:

    def __init__(self):
        self.root = None
        self.size = 0

    def __len__(self):
        return self.size

    def __iter__(self):
        return self.root.__iter__()

    def put(self, key, val):  # increase node /// to find the root
        if self.root:
            self._put(key, val, self.root)
        else:
            self.root = TreeNode(key, val)
        self.size = self.size + 1

    # finf the correct place to input node. for my project, put rating value, key == rating.
    # payload = movie name
    def _put(self, key, val, currentNode):
        if key < currentNode.key:
            if currentNode.hasLeftChild():
                self._put(key, val, currentNode.leftChild)
            else:
                currentNode.leftChild = TreeNode(key, val, parent=currentNode)
        else:
            if currentNode.hasRightChild():
                self._put(key, val, currentNode.rightChild)
            else:
                currentNode.rightChild = TreeNode(key, val, parent=currentNode)

    def get(self, key):
        if self.root:
            res = self._get(key, self.root)
            if res:
                return res.payload
            else:
                return None
        else:
            return None

    def _get(self, key, currentNode):
        if not currentNode:
            return None
        elif currentNode.key == key:
            return currentNode
        elif key < currentNode.key:
            return self._get(key, currentNode.leftChild)
        else:
            return self._get(key, currentNode.rightChild)

    def __getitem__(self, key):
        return self.get(key)

    def format(self, currentNode):
        if currentNode == None:
            return None
        else:
            if currentNode.isLeaf():
                format = (currentNode.key, currentNode.payload)
            elif currentNode.hasBothChildren():
                format = ((currentNode.key, currentNode.payload), self.format(
                    currentNode.leftChild), self.format(currentNode.rightChild))
            elif currentNode.hasLeftChild():
                format = ((currentNode.key, currentNode.payload), self.format(
                    currentNode.leftChild))
            else:
                format = ((currentNode.key, currentNode.payload), self.format(
                    currentNode.rightChild))
        return format

    def saveTree(self, jsonfile):
        tree_format = self.format(self.root)
        tree_json = json.dumps(tree_format)
        write_file = open(jsonfile, 'w')
        write_file.write(tree_json)
        write_file.close()
